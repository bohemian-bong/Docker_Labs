## Data Base Dockerfile------------------------------------------

FROM mongo:latest
EXPOSE 27017

## Server Dockerfile --------------------------------------------

# Use the official Node.js image as base
FROM node:latest

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install express
RUN npm install cors
RUN npm install mongoose

# Copy the rest of the application code
COPY . .

# Expose port 3000
EXPOSE 3000

#CMD [ "/bin/bash", "-c", "bash /home/.evaluationScripts/activityInitiator/initactivity.sh; while :; do sleep 10; done"]

# Command to run the server
CMD ["npm", "start"]

## Client Dockerfile -------------------------------------------------------

# Use the official Nginx image as base
FROM nginx:latest

# Install Node.js
RUN apt-get update && \
    apt-get install -y nodejs npm && \
    npm install -g n && \
    n latest && \
    ln -sf /usr/local/bin/node /usr/bin/node


# Copy the built app from the host machine to Nginx's HTML directory
COPY . /usr/share/nginx/html

# Expose port 80
EXPOSE 80

## Compose .yaml file -------------------------------------------------------

services:
  mongodb-container:
    build: ./database
    networks:
      - server-network

  server-container:
    build: ./server
    depends_on:
      - mongodb-container
    environment:
      MONGODB_CONTAINER_HOST: activity2-mongodb-container-1
    networks:
      - server-network
        
  client-container:
    build: ./client
    ports:
      - "80:80"
    networks:
      - client-network
    environment:
      SERVER_URL: activity2-server-container-1
    develop:
      watch:
      - action: sync
        path: .
        target: /code

  router-container:
    image: alpine
    command: sh -c "sleep infinity"
    networks:
      - server-network
      - client-network

networks:
  server-network:
    driver: bridge
  client-network:
    driver: bridge
  router-network:
    driver: bridge

