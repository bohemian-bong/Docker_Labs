Activity 1: This lab aims to introduce fundamental concepts of Docker Compose by guiding you through the development of a basic Python web application.
	Using the Flask framework, the application is featured in Redis, providing a practical example of how Docker Compose can be applied in web development scenarios.

---------------PART ONE: Using Docker Compose to run containaers---------------

Step 1: There is file named app.py in labDirectory. Read the following code carefully as it is python code of using Flask to run a web apllication with hostname "redis" and on port 6379. Copy the code to the file app.py.

	import time

	import redis
	from flask import Flask

	app = Flask(__name__)
	cache = redis.Redis(host='redis', port=6379)

	def get_hit_count():
	    retries = 5
	    while True:
	        try:
	            return cache.incr('hits')
	        except redis.exceptions.ConnectionError as exc:
	            if retries == 0:
	                raise exc
	            retries -= 1
	            time.sleep(0.5)

	@app.route('/')
	def hello():
	    count = get_hit_count()
	    return 'Hello World! I have been seen {} times.\n'.format(count)

Step 2: There is another file in labDirectory named requirements.txt. Edit the file to enter the following requirements:
	flask
	redis

Step 3: Create a Dockerfile that has the following functionalities:
	- Build an image starting with Python 3.10 image
	- set the working directory to /code
	- Set environment variables used by the flask command
	- Install gcc and other dependencies
	- Copy requirements.txt and install the Python dependencies
	- Add metadata to the image to describe that the container is listening on port 5000
	- Copy the current directory . in the project to the workdir . in the image.
	- Set the default command for the container to flask run --debug

Step 4: Define services in a Compose file. Compose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single, comprehensible YAML configuration file. Create a file called compose.yaml and the write the compose file there:
	- The compose file must define two services web and redis.
	- The web service must an image that's built from the Dockerfile in the current directory. It must also bind the container and the host machine to the exposed port 8000.
	- the redis service must pull a public redis image pulled from Docker hub registry.

Step 5: Build and run the app using the following command:
	docker compose up

Step 6: Evaluate the lab for Part one evaluations and then stop docker compose by using the ctrl+c.

----------PART TWO: Using Compose watch to manage file changes-------------

Step 1: Edit the compose.yaml filwe to edit the following functionalities:
	Compose must sync the file to the corresponding location under /code inside the container.
	Once done, the bundler updates the running application without a restart.

Step 2: Build and launch the app by using the command: 
	docker compose up --watch

Step 3: Now change the output from "Hello World" to "Hello IIT Bombay" in app.py. You will be able to see the change in the webpage withour restarting the application.
	
